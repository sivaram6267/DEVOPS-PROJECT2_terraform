#1: Update the Machine

sudo apt-get update

#2: Terraform Installation Commands:

sudo apt-get install -y gnupg software-properties-common

wget -O- https://apt.releases.hashicorp.com/gpg | \
gpg - dearmor | \
sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

gpg --no-default-keyring \
 --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
 --fingerprint

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt-get update

sudo apt-get install terraform –y

terraform -help

terraform --version

#3: Create a main.tf file with the below-given content:

provider "aws" {
     region = "us-west-2"
}
resource "aws_instance" "Kubernetes_Master" {
  ami           = "ami-0aff18ec83b712f05"
  instance_type = "t2.medium"
  subnet_id = "subnet-013d8f5f0f962f5fc"
  key_name = "Demo"
  tags = {
    Name = "Machine-3"
  } 
}
resource "aws_instance" "Kubernetes_Slave1" {
  ami           = "ami-0aff18ec83b712f05"
  instance_type = "t2.micro"
  subnet_id = "subnet-013d8f5f0f962f5fc"
  key_name = "Demo"
  tags = {
    Name = "Machine-2"
  } 
}
resource "aws_instance" "Kubernetes_Slave2" {
  ami           = "ami-0aff18ec83b712f05"
  instance_type = "t2.micro"
  subnet_id = "subnet-013d8f5f0f962f5fc"
  key_name = "Demo"
  tags = {
    Name = "Machine-4"
   } 
}

#4: Initialize the Terraform: 

terraform init

#5: Configure the AWS Settings for running the main.tf file using the below-given command: 

aws configure

#6: Plan the Configuration using the below-given command:

terraform plan

#7: Apply the Script to create the infrastructure:

terraform apply

#8: Install “Ansible” on Machine 1 (main) Commands:

sudo apt-get update

sudo apt install software-properties-common

sudo apt-add-repository --yes --update ppa:ansible/ansible

sudo apt-get install ansible

ansible --version

cd .ssh/

ssh-keygen

sudo cat id_ed25519.pub

cd .ssh/

cd .ssh/

cd .ssh/

sudo nano authorized_keys

sudo nano authorized_keys

sudo nano authorized_keys

#9: Paste the Private IP Addresses of Slaves in the hosts File using the below-given commands of Machine-1 (Main)

cd ..

sudo nano /etc/ansible/hosts

[master]
Machine3 ansible_host=10.0.6.181
[slaves]
Machine2 ansible_host=10.0.2.158
Machine4 ansible_host=10.0.6.49

ansible -m ping all

#10: Create the script1.sh file: nano script1.sh

sudo apt-get update
sudo apt-get install openjdk-17-jre-headless -y
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
https://pkg.jenkins.io/debian/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
https://pkg.jenkins.io/debian binary/ | sudo tee \
/etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y

#11: Create the script2.sh file: nano script2.sh

sudo apt-get update
sudo apt-get install openjdk-17-jre-headless -y
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg - dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet


#12: Create the script3.sh file: nano script3.sh

sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet


#13: Create the play.yaml to run the scripts: nano play.yaml

---
- name: install Jenkins & Java on Machine 1
  become: true
  hosts: localhost
  tasks:
  - name: running script1
    script: script1.sh

- name: install Java, Docker & Kubernetes on Machine-1
  become: true
  hosts: master
  tasks:
  - name: running script2
    script: script2.sh

- name: install Docker & Kubernetes on Machine-2&4
  become: true
  hosts: slaves
  tasks:
  - name: running script3
    script: script3.sh


#14: Check the play syntax using the below-given command:

ansible-playbook play.yaml --syntax-check 

#15: Run the playbook using the below-given command:

ansible-playbook play.yaml

#16: Initialize the Kubeadm using the below-given command:

sudo kubeadm init --apiserver-advertise-address=10.0.6.181

#17: Paste the token to Slaves for joing the nodes using the below-given command:

sudo kubeadm join 10.0.6.181:6443 - token deah3l.63iy82w2wemxob0i \
 - discovery-token-ca-cert-hash sha256:fcef755283501fdbe7e734dd6f52c657737b8300d93abadbcbe1cfb0f18d5fe5

#18:  Paste the below-given commands in the “Master” node:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#19: Install the Calico network using the below-given command:

curl https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/calico.yaml -O

#20: Create the calico network, use the below-given command:

kubectl apply -f calico.yaml

#21: To find the nodes in the Kubernetes, use the below-given command:

kubectl get no 

#22: Paste the below-given code command to copy the token from Machine-1:

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

#23: Sample Pipeline Script:

pipeline {
    agent none
    environment {
      DOCKERHUB_CREDENTIALS=credentials("2d637aab-be8f-43b1-b1ed-f01bc5bb095e") 
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

#24: Github Repository Adding Script to Kubernetes-Master Node in the Jenkins, paste the below-given script:

pipeline {
    agent none
    environment {
        DOCKERHUB_CREDENTIALS=credentials('2d637aab-be8f-43b1-b1ed-f01bc5bb095e')
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Git') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                git 'https://github.com/visaltyagi/website.git'
            }
        }
    }
}


#25: Push the DockerHub Image using the below-given script:

pipeline {
    agent none
    environment {
        DOCKERHUB_CREDENTIALS=credentials('2d637aab-be8f-43b1-b1ed-f01bc5bb095e')
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Git') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                git 'https://github.com/visaltyagi/website.git'
            }
        }
        stage('Docker') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                sh 'sudo docker build /home/ubuntu/jenkins/workspace/Testpipeline -t visaltyagi12/project2'
                sh 'sudo echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'sudo docker push visaltyagi12/project2'
            }
        }
    }
}

#26: Create a deployment.yaml file using the below-given script:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: visaltyagi12/project2:latest
        ports:
        - containerPort: 80

#27: Create a service.yaml file using the below-given script:

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30008

#28: Deployment creation pipeline script code:

pipeline {
    agent none
    environment {
        DOCKERHUB_CREDENTIALS=credentials('588da552-478b-4a8f-9edf-a4de0ff29435')
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Git') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                git 'https://github.com/visaltyagi/website.git'
            }
        }
        stage('Docker') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                sh 'sudo docker build /home/ubuntu/jenkins/workspace/Testpipeline -t visaltyagi12/project2'
                sh 'sudo echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'sudo docker push visaltyagi12/project2'
            }
        }
        stage('K8s') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                sh 'kubectl apply -f deployment.yaml'
                sh 'kubectl apply -f service.yaml'
            }
        }
    }
}


#29: Delete the old deployment & create a new deployment, use this code:

pipeline {
    agent none
    environment {
        DOCKERHUB_CREDENTIALS=credentials('588da552-478b-4a8f-9edf-a4de0ff29435')
    }
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Git') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                git 'https://github.com/visaltyagi/website.git'
            }
        }
        stage('Docker') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                sh 'sudo docker build /home/ubuntu/jenkins/workspace/Testpipeline -t visaltyagi12/project2'
                sh 'sudo echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'sudo docker push visaltyagi12/project2'
            }
        }
        stage('K8s') {
            agent {
                label 'Kubernetes-Master'
            }
            steps {
                sh 'kubectl delete deploy nginx-deployment'
                sh 'kubectl apply -f deployment.yaml'
                sh 'kubectl apply -f service.yaml'
            }
        }
    }
}


#30: Modify the index.html file:

<html>
<head>
<title> DevOps Capstone Project 2 </title>
</head>
<body style = "background-image:url('images/github3.jpg'); background-size: 100%">
<h2 ALIGN=CENTER>Hello world!</h2>
</body>
</html>










